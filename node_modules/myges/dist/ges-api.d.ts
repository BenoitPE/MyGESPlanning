import { AxiosRequestConfig } from 'axios';
import { AgendaItem } from './interfaces/agenda.interface';
import { Project } from './interfaces/project.interface';
export interface AccessToken {
    access_token: string;
    token_type: string;
    expires_in: string;
    scope: string;
    uid: string;
}
export declare type GesAuthenticationToken = {
    token_type: string;
    access_token: string;
};
export declare class GesAPI {
    private credentials;
    constructor(credentials: GesAuthenticationToken);
    static login(username: string, password: string): Promise<GesAPI>;
    static generateAccessToken(username: string, password: string): Promise<AccessToken | null>;
    getYears(): Promise<any>;
    getProfile(): Promise<any>;
    getAgenda(start: Date, end: Date): Promise<AgendaItem[]>;
    getAbsences(year: string): Promise<any>;
    getGrades(year: string): Promise<any>;
    getCourses(year: string): Promise<any>;
    getProjects(year: string): Promise<any>;
    getProject(id: string): Promise<Project>;
    joinProjectGroup(projectRcId: number, projectId: number, projectGroupId: number): Promise<any>;
    quitProjectGroup(projectRcId: number, projectId: number, projectGroupId: number): Promise<any>;
    getProjectGroupMessages(projectGroupId: number): Promise<any>;
    sendProjectGroupMessage(projectGroupId: number, message: string): Promise<any>;
    getNextProjectSteps(): Promise<any>;
    request<T = any>(method: AxiosRequestConfig['method'], url: string, request_config?: AxiosRequestConfig): Promise<T>;
    private get;
    private post;
    private put;
    private delete;
}
