"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const configurator = __importStar(require("../config"));
const display = __importStar(require("../display"));
const commands_base_1 = require("../commands-base");
const ges_api_1 = require("../ges-api");
function register(program) {
    program
        .command('request <method> <url>')
        .option('-r, --raw', 'output the raw data')
        .option('-t, --table', 'output data in a table')
        .option('-b, --body <value>', 'add a body (must be a JSON)', '{}')
        .description('make a request to the API')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(method, url, options) {
    try {
        const config = await configurator.load(true);
        const api = new ges_api_1.GesAPI(config);
        const result = await api.request(method, url, {
            data: options.body,
            headers: {
                'Content-type': 'application/json; charset=utf-8',
            },
        });
        if (options.raw) {
            console.log(JSON.stringify(result));
        }
        else if (options.table) {
            display.table(result);
        }
        else {
            console.log(result);
        }
    }
    catch (e) {
        if (options.debug) {
            console.error(e);
        }
        else {
            console.error(e.message);
        }
    }
}
