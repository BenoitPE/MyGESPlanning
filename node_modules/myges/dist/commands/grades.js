"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const commands_base_1 = require("../commands-base");
const configurator = __importStar(require("../config"));
const display = __importStar(require("../display"));
const ges_api_1 = require("../ges-api");
function register(program) {
    program
        .command('grades [year]')
        .option('-r, --raw', 'output the raw data')
        .description('list grades')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(year, options) {
    try {
        const config = await configurator.load(true);
        const api = new ges_api_1.GesAPI(config);
        if (!year) {
            const answers = await inquirer_1.default.prompt([
                {
                    message: 'Choose a year',
                    name: 'year',
                    type: 'list',
                    choices: await api.getYears(),
                },
            ]);
            year = answers.year;
        }
        const grades = await api.getGrades(year);
        if (options.raw) {
            console.log(JSON.stringify(grades));
        }
        else if (!grades) {
            console.log('Nothing to display.');
        }
        else {
            const trimesters = [...new Set(grades.map((grade) => grade.trimester))]
                .sort()
                .map((trimester) => {
                const trimester_grades = grades.filter((grade) => grade.trimester === trimester);
                const cc = Math.max(...trimester_grades.map((grade) => grade.grades.length));
                const ccs = trimester_grades.map((grade) => [...Array(cc).keys()].reduce((o, i) => {
                    o[`CC${i + 1}`] =
                        grade.grades.length > i ? grade.grades[i] : null;
                    return o;
                }, {}));
                const trimester_grades_formated = trimester_grades.map((grade, i) => {
                    const average = grade.average === null && grade.grades.length > 0
                        ? grade.grades.reduce((a, b) => a + b, 0) / grade.grades.length
                        : grade.average;
                    return Object.assign(Object.assign({ Year: grade.year, Trimester: `${grade.trimester_name} (${grade.trimester})`, Teacher: `${grade.teacher_civility} ${grade.teacher_last_name} ${grade.teacher_first_name}`, Course: grade.course, 'Coef. / ECTS': grade.coef || grade.ects }, ccs[i]), { Exam: grade.exam, Average: average !== null ? Math.floor(average * 100) / 100 : null });
                });
                let count = 0;
                const averages = trimester_grades_formated
                    .map((grade) => {
                    if (grade.Average !== null) {
                        const coef = parseFloat(grade['Coef. / ECTS']) || 1;
                        count += coef;
                        return grade.Average * coef;
                    }
                    return null;
                })
                    .filter((average) => average !== null);
                const average = count > 0 ? averages.reduce((a, b) => a + b, 0) / count || 0 : 0;
                trimester_grades_formated.push({
                    Course: 'GLOBAL AVERAGE',
                    Average: Math.floor(average * 100) / 100,
                });
                return trimester_grades_formated;
            });
            display.multiple(trimesters);
        }
    }
    catch (e) {
        if (options.debug) {
            console.error(e);
        }
        else {
            console.error(e.message);
        }
    }
}
