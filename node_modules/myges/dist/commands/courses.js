"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const commands_base_1 = require("../commands-base");
const configurator = __importStar(require("../config"));
const display = __importStar(require("../display"));
const ges_api_1 = require("../ges-api");
function register(program) {
    program
        .command('courses [year]')
        .option('-r, --raw', 'output the raw data')
        .description('list courses')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(year, options) {
    try {
        const config = await configurator.load(true);
        const api = new ges_api_1.GesAPI(config);
        if (!year) {
            const answers = await inquirer_1.default.prompt([
                {
                    message: 'Choose a year',
                    name: 'year',
                    type: 'list',
                    choices: await api.getYears(),
                },
            ]);
            year = answers.year;
        }
        const courses = await api.getCourses(year);
        if (options.raw) {
            console.log(JSON.stringify(courses));
        }
        else if (!courses) {
            console.log('Nothing to display.');
        }
        else {
            const trimesters = [
                ...new Set(courses.map((course) => course.trimester)),
            ].sort();
            trimesters.forEach((trimester) => {
                const trimesterCourses = courses
                    .filter((course) => course.trimester === trimester)
                    .map((course) => ({
                    rc_id: course.rc_id,
                    Year: course.year,
                    Trimester: `${course.trimester} (${course.trimester_id})`,
                    Name: course.name,
                    'Student group': `${course.student_group_name} (${course.student_group_id})`,
                    Teacher: `${course.teacher} (${course.teacher_id})`,
                }));
                display.table(trimesterCourses);
            });
        }
    }
    catch (e) {
        if (options.debug) {
            console.error(e);
        }
        else {
            console.error(e.message);
        }
    }
}
