"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const commands_base_1 = require("../../commands-base");
const configurator = __importStar(require("../../config"));
const display = __importStar(require("../../display"));
const ges_api_1 = require("../../ges-api");
function register(program) {
    program
        .command('ls [year]')
        .option('-r, --raw', 'output the raw data')
        .option('-y, --year <year>', 'pre-select a year')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(year, options) {
    const config = await configurator.load(true);
    const api = new ges_api_1.GesAPI(config);
    if (!year) {
        const answers = await inquirer_1.default.prompt([
            {
                message: 'Choose a year',
                name: 'year',
                type: 'list',
                choices: await api.getYears(),
            },
        ]);
        year = answers.year;
    }
    const projects = await api.getProjects(year);
    if (options.raw) {
        console.log(JSON.stringify(projects));
    }
    else if (!projects) {
        console.log('Nothing to display.');
    }
    else {
        const { uid } = await api.getProfile();
        display.table(projects.map((project) => {
            const group = project.groups.find((group) => !!(group.project_group_students || []).find((student) => student.u_id === uid));
            const group_infos = {};
            if (group) {
                if (project.project_id == 5301) {
                    group_infos.Test = 5;
                }
                group_infos.Group = `${group.group_name} (${group.project_group_id})`;
                if (group.date_presentation > 0) {
                    const date = new Date(group.date_presentation);
                    group_infos['Presentation Date'] = `${date.toDateString()} at ${date
                        .getHours()
                        .toString()
                        .padStart(2, '0')}:${date
                        .getMinutes()
                        .toString()
                        .padStart(2, '0')}`;
                }
            }
            return Object.assign({ ID: project.project_id, Name: project.name }, group_infos);
        }));
    }
}
