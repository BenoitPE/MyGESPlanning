"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const colors_1 = __importDefault(require("colors"));
const readline_1 = __importDefault(require("readline"));
const commands_base_1 = require("../../commands-base");
const configurator = __importStar(require("../../config"));
const ges_api_1 = require("../../ges-api");
const show_1 = require("./show");
function register(program) {
    program
        .command('chat [id]')
        .option('-y, --year <year>', 'pre-select a year')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(id, options) {
    const config = await configurator.load(true);
    const api = new ges_api_1.GesAPI(config);
    const project = await (0, show_1.getProject)(id, options);
    const { uid } = await api.getProfile();
    const group = project.groups.find((group) => !!(group.project_group_students || []).find((student) => student.u_id === uid));
    const rl = readline_1.default.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    rl.once('SIGINT', () => {
        process.exit(0);
    });
    const messages = await api.getProjectGroupMessages(group.project_group_id);
    function display_message(message) {
        const date = new Date(message.date);
        const date_str = `${date.getDate().toString().padStart(2, '0')}/${date
            .getMonth()
            .toString()
            .padStart(2, '0')}/${date.getFullYear()} ${date
            .getHours()
            .toString()
            .padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
        let prefix = '';
        if (message.uid === uid) {
            prefix = colors_1.default.grey(`[${date_str}] You`);
        }
        else {
            prefix = colors_1.default.cyan(`[${date_str}] ${message.firstname} ${message.name}`);
        }
        console.log(`${prefix}${colors_1.default.grey(':')} ${message.message}`);
    }
    messages.forEach(display_message);
    let timer = null;
    async function update_messages() {
        if (timer) {
            clearTimeout(timer);
        }
        process.stdout.clearLine(0);
        process.stdout.cursorTo(0);
        const data = await api.getProjectGroupMessages(group.project_group_id);
        const new_messages = data.slice(messages.length);
        for (const message of new_messages) {
            display_message(message);
            messages.push(message);
        }
        timer = setTimeout(update_messages, 20000);
        rl.prompt();
    }
    rl.on('line', async (message) => {
        try {
            await api.sendProjectGroupMessage(group.project_group_id, message);
            await update_messages();
        }
        catch (e) {
            if (options.debug) {
                console.error(e);
            }
            else {
                console.error(e.message);
            }
            rl.prompt();
        }
    });
    await update_messages();
}
