"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProject = exports.register = void 0;
const colors_1 = __importDefault(require("colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const commands_base_1 = require("../../commands-base");
const configurator = __importStar(require("../../config"));
const display = __importStar(require("../../display"));
const ges_api_1 = require("../../ges-api");
function register(program) {
    program
        .command('show [id]')
        .option('-r, --raw', 'output the raw data')
        .option('-y, --year <year>', 'pre-select a year')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(id, options) {
    const config = await configurator.load(true);
    const api = new ges_api_1.GesAPI(config);
    const project = await getProject(id, options);
    if (options.raw) {
        console.log(JSON.stringify(project));
    }
    else {
        const { uid } = await api.getProfile();
        const group = project.groups.find((group) => !!(group.project_group_students || []).find((student) => student.u_id === uid));
        let group_infos = {};
        if (group) {
            group_infos = {
                Group: `${group.group_name} (${group.project_group_id})`,
            };
            if (group.date_presentation > 0) {
                const date = new Date(group.date_presentation);
                group_infos['Presentation Date'] = `${date.toDateString()} at ${date
                    .getHours()
                    .toString()
                    .padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
            }
        }
        display.table([
            {
                Name: colors_1.default.cyan('ID'),
                Value: project.project_id,
            },
            {
                Name: colors_1.default.cyan('Name'),
                Value: project.name,
            },
            ...Object.keys(group_infos).map((key) => ({
                Name: colors_1.default.cyan(key),
                Value: group_infos[key],
            })),
        ], false);
    }
}
async function getProject(id, options) {
    const config = await configurator.load(true);
    const api = new ges_api_1.GesAPI(config);
    let project = null;
    if (!id) {
        if (!options.year) {
            const answers = await inquirer_1.default.prompt([
                {
                    message: 'Choose a year',
                    name: 'year',
                    type: 'list',
                    choices: await api.getYears(),
                },
            ]);
            options.year = answers.year;
        }
        const projects = await api.getProjects(options.year);
        if (!projects) {
            throw new Error(`No projects found for year ${options.year}.`);
        }
        const answers = await inquirer_1.default.prompt([
            {
                message: 'Choose a project',
                name: 'project',
                type: 'list',
                choices: projects.map((project) => ({
                    name: project.name,
                    value: project.project_id,
                })),
            },
        ]);
        id = answers.project;
        project = projects.find((project) => project.project_id === id);
    }
    else {
        project = await api.getProject(id);
    }
    if (!project) {
        throw new Error(`Project ${id} not found.`);
    }
    return project;
}
exports.getProject = getProject;
