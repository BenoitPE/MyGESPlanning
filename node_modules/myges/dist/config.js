"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.erase = exports.load = exports.save = exports.prompt_credentials = void 0;
const fs_1 = require("fs");
const inquirer_1 = __importDefault(require("inquirer"));
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const _1 = require(".");
const config_path = path_1.default.resolve((0, os_1.homedir)(), '.myges');
async function prompt_credentials() {
    try {
        const { username, password } = await inquirer_1.default.prompt([
            {
                message: 'Username: ',
                name: 'username',
            },
            {
                message: 'Password: ',
                name: 'password',
                type: 'password',
            },
        ]);
        return Object.assign({ username }, (await _1.GesAPI.generateAccessToken(username, password)));
    }
    catch (e) {
        if (e.isTtyError) {
            throw new Error(`Prompt couldn't be rendered in the current environment: ${e.message}`);
        }
        else {
            throw e;
        }
    }
}
exports.prompt_credentials = prompt_credentials;
async function save(config) {
    return await fs_1.promises.writeFile(config_path, JSON.stringify(config));
}
exports.save = save;
function must_be_logged() {
    console.error('You must be logged in before using that command. (myges login)');
    return process.exit(1);
}
async function load(exit_if_not_logged = false) {
    var _a, _b;
    try {
        const config = await fs_1.promises.readFile(config_path, { encoding: 'utf8' });
        const parsed = JSON.parse(config);
        if (exit_if_not_logged &&
            (!parsed.username ||
                !parsed.access_token ||
                !parsed.token_type ||
                !parsed.expires)) {
            return must_be_logged();
        }
        if (parsed.expires && Date.now() >= parsed.expires) {
            const { password } = await inquirer_1.default.prompt([
                {
                    message: 'Session expired - Enter your password: ',
                    name: 'password',
                    type: 'password',
                },
            ]);
            const info = await _1.GesAPI.generateAccessToken(parsed.username, password);
            parsed.access_token = info.access_token;
            parsed.token_type = info.token_type;
            parsed.expires = Date.now() + parseInt(info.expires_in, 10) * 1000;
            await save(parsed);
        }
        return {
            access_token: (_a = parsed.access_token) !== null && _a !== void 0 ? _a : null,
            token_type: (_b = parsed.token_type) !== null && _b !== void 0 ? _b : null,
        };
    }
    catch (_) {
        if (exit_if_not_logged) {
            return must_be_logged();
        }
        return {
            access_token: null,
            token_type: null,
        };
    }
}
exports.load = load;
async function erase() {
    return await fs_1.promises.writeFile(config_path, JSON.stringify({}));
}
exports.erase = erase;
